{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\diego\\\\Desktop\\\\mern-webee\\\\frontend\\\\src\\\\components\\\\map\\\\SensorsMap.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport Link from \"react-dom\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"./SensorMap.css\";\nimport { getSensors } from \"../sensor/SensorService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = \"pk.eyJ1IjoiZGllZ29zYWxvbmlhIiwiYSI6ImNrcTZzY2dyejFnZGcydm12eW5oemhvMzEifQ.1jFMrHrPaucTX_LENmmWLQ\";\n\nconst SensorsMap = () => {\n  _s();\n\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const [lng, setLng] = useState(-64.190405);\n  const [lat, setLat] = useState(-31.407334);\n  const [zoom, setZoom] = useState(9);\n\n  const getSensorsMap = async () => {\n    const resp = await getSensors();\n    const data = await resp.json();\n    console.log(data);\n  };\n\n  getSensorsMap();\n  const mapto = new mapboxgl.Map({\n    container: 'map',\n    // container ID\n    style: 'mapbox://styles/mapbox/dark-v10',\n    // style URL\n    zoom: 10,\n    // starting zoom\n    center: [-77.432, 25.0306] // starting position\n\n  });\n  mapto.on(\"load\", sensors => {\n    map.addSource(\"point\", {\n      type: \"geojson\",\n      data: {\n        type: \"FeatureCollection\",\n        features: sensors // features: [\n        //   {\n        //     type: \"Feature\",\n        //     geometry: {\n        //       type: \"Point\",\n        //       coordinates: [lng, lat],\n        //     },\n        //   },\n        // ],\n\n      }\n    });\n    map.addLayer({\n      id: \"points\",\n      type: \"symbol\",\n      source: \"point\",\n      // reference the data source\n      layout: {\n        \"icon-image\": \"cat\",\n        // reference the image\n        \"icon-size\": 0.25\n      }\n    });\n  });\n  useEffect(() => {\n    if (map.current) return; // initialize map only once\n\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: \"mapbox://styles/mapbox/streets-v11\",\n      center: [lng, lat],\n      zoom: zoom\n    });\n  });\n  useEffect(() => {\n    if (!map.current) return; // wait for map to initialize\n\n    map.current.on(\"move\", () => {\n      setLng(map.current.getCenter().lng.toFixed(4));\n      setLat(map.current.getCenter().lat.toFixed(4));\n      setZoom(map.current.getZoom().toFixed(2));\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [\"Longitude: \", lng, \" | Latitude: \", lat, \" | Zoom: \", zoom]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainer,\n      className: \"mapsensor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SensorsMap, \"uY45lAhZWW7J4Kl+RRH1j13uo/A=\");\n\n_c = SensorsMap;\nexport default SensorsMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"SensorsMap\");","map":{"version":3,"sources":["C:/Users/diego/Desktop/mern-webee/frontend/src/components/map/SensorsMap.js"],"names":["React","useRef","useEffect","useState","Link","mapboxgl","getSensors","accessToken","SensorsMap","mapContainer","map","lng","setLng","lat","setLat","zoom","setZoom","getSensorsMap","resp","data","json","console","log","mapto","Map","container","style","center","on","sensors","addSource","type","features","addLayer","id","source","layout","current","getCenter","toFixed","getZoom"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport Link from \"react-dom\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport \"./SensorMap.css\";\r\nimport { getSensors } from \"../sensor/SensorService\";\r\n\r\nmapboxgl.accessToken =\r\n  \"pk.eyJ1IjoiZGllZ29zYWxvbmlhIiwiYSI6ImNrcTZzY2dyejFnZGcydm12eW5oemhvMzEifQ.1jFMrHrPaucTX_LENmmWLQ\";\r\n\r\nconst SensorsMap = () => {\r\n  const mapContainer = useRef(null);\r\n  const map = useRef(null);\r\n  const [lng, setLng] = useState(-64.190405);\r\n  const [lat, setLat] = useState(-31.407334);\r\n  const [zoom, setZoom] = useState(9);\r\n\r\n  const getSensorsMap = async() => {\r\n    const resp = await getSensors()\r\n    const data = await resp.json();\r\n\r\n    console.log(data)\r\n  }\r\n\r\n  getSensorsMap()\r\n\r\n  const mapto = new mapboxgl.Map({\r\n    container: 'map', // container ID\r\n    style: 'mapbox://styles/mapbox/dark-v10', // style URL\r\n    zoom: 10, // starting zoom\r\n    center: [-77.432, 25.0306] // starting position\r\n    });\r\n  mapto.on(\"load\", (sensors) => {\r\n        map.addSource(\"point\", {\r\n          type: \"geojson\",\r\n          data: {\r\n            type: \"FeatureCollection\",\r\n            features: sensors,\r\n            // features: [\r\n            //   {\r\n            //     type: \"Feature\",\r\n            //     geometry: {\r\n            //       type: \"Point\",\r\n            //       coordinates: [lng, lat],\r\n            //     },\r\n            //   },\r\n            // ],\r\n          },\r\n        });\r\n        map.addLayer({\r\n          id: \"points\",\r\n          type: \"symbol\",\r\n          source: \"point\", // reference the data source\r\n          layout: {\r\n            \"icon-image\": \"cat\", // reference the image\r\n            \"icon-size\": 0.25,\r\n          },\r\n        });\r\n      }\r\n    );\r\n\r\n  useEffect(() => {\r\n    if (map.current) return; // initialize map only once\r\n    map.current = new mapboxgl.Map({\r\n      container: mapContainer.current,\r\n      style: \"mapbox://styles/mapbox/streets-v11\",\r\n      center: [lng, lat],\r\n      zoom: zoom,\r\n    });\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!map.current) return; // wait for map to initialize\r\n    map.current.on(\"move\", () => {\r\n      setLng(map.current.getCenter().lng.toFixed(4));\r\n      setLat(map.current.getCenter().lat.toFixed(4));\r\n      setZoom(map.current.getZoom().toFixed(2));\r\n    });\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"sidebar\">\r\n        Longitude: {lng} | Latitude: {lat} | Zoom: {zoom}\r\n      </div>\r\n      <div ref={mapContainer} className=\"mapsensor\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SensorsMap;\r\n"]},"metadata":{},"sourceType":"module"}