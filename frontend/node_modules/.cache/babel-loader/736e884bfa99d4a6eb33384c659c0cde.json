{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\diego\\\\Desktop\\\\mern-webee\\\\frontend\\\\src\\\\components\\\\map\\\\SensorsMap.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport Link from \"react-dom\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"./SensorMap.css\";\nimport { getSensors } from \"../sensor/SensorService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = \"pk.eyJ1IjoiZGllZ29zYWxvbmlhIiwiYSI6ImNrcTZzY2dyejFnZGcydm12eW5oemhvMzEifQ.1jFMrHrPaucTX_LENmmWLQ\";\n\nconst SensorsMap = () => {\n  _s();\n\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const [lng, setLng] = useState(-64.190405);\n  const [lat, setLat] = useState(-31.407334);\n  const [zoom, setZoom] = useState(9);\n\n  const getSensorsMap = async () => {\n    const resp = await getSensors();\n    const sensors = res.data.data.map(sensor => {\n      return {\n        type: 'feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [sensor.location.coordinates[0], sensor.location.coordinates[1]]\n        }\n      };\n    });\n    console.log(resp);\n  };\n\n  getSensorsMap(); // features: [\n  //   {\n  //     type: \"Feature\",\n  //     geometry: {\n  //       type: \"Point\",\n  //       coordinates: [lng, lat],\n  //     },\n  //   },\n  // ],\n\n  useEffect(() => {\n    if (map.current) return; // initialize map only once\n\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: \"mapbox://styles/mapbox/streets-v11\",\n      center: [lng, lat],\n      zoom: zoom\n    });\n  });\n  useEffect(() => {\n    if (!map.current) return; // wait for map to initialize\n\n    map.current.on(\"move\", () => {\n      setLng(map.current.getCenter().lng.toFixed(4));\n      setLat(map.current.getCenter().lat.toFixed(4));\n      setZoom(map.current.getZoom().toFixed(2));\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [\"Longitude: \", lng, \" | Latitude: \", lat, \" | Zoom: \", zoom]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainer,\n      className: \"mapsensor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SensorsMap, \"uY45lAhZWW7J4Kl+RRH1j13uo/A=\");\n\n_c = SensorsMap;\nexport default SensorsMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"SensorsMap\");","map":{"version":3,"sources":["C:/Users/diego/Desktop/mern-webee/frontend/src/components/map/SensorsMap.js"],"names":["React","useRef","useEffect","useState","Link","mapboxgl","getSensors","accessToken","SensorsMap","mapContainer","map","lng","setLng","lat","setLat","zoom","setZoom","getSensorsMap","resp","sensors","res","data","sensor","type","geometry","coordinates","location","console","log","current","Map","container","style","center","on","getCenter","toFixed","getZoom"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport Link from \"react-dom\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport \"./SensorMap.css\";\r\nimport { getSensors } from \"../sensor/SensorService\";\r\n\r\nmapboxgl.accessToken =\r\n  \"pk.eyJ1IjoiZGllZ29zYWxvbmlhIiwiYSI6ImNrcTZzY2dyejFnZGcydm12eW5oemhvMzEifQ.1jFMrHrPaucTX_LENmmWLQ\";\r\n\r\nconst SensorsMap = () => {\r\n  const mapContainer = useRef(null);\r\n  const map = useRef(null);\r\n  const [lng, setLng] = useState(-64.190405);\r\n  const [lat, setLat] = useState(-31.407334);\r\n  const [zoom, setZoom] = useState(9);\r\n\r\n  const getSensorsMap = async() => {\r\n    const resp = await getSensors()\r\n  \r\n    const sensors = res.data.data.map(sensor => {\r\n        return {\r\n            type: 'feature',\r\n            geometry: {\r\n                type: 'Point',\r\n                coordinates: [sensor.location.coordinates[0], sensor.location.coordinates[1]]\r\n            }\r\n        }\r\n    })\r\n    \r\n    console.log(resp)\r\n}\r\n\r\ngetSensorsMap()\r\n\r\n\r\n          // features: [\r\n          //   {\r\n          //     type: \"Feature\",\r\n          //     geometry: {\r\n          //       type: \"Point\",\r\n          //       coordinates: [lng, lat],\r\n          //     },\r\n          //   },\r\n          // ],\r\n     \r\n  useEffect(() => {\r\n    if (map.current) return; // initialize map only once\r\n    map.current = new mapboxgl.Map({\r\n      container: mapContainer.current,\r\n      style: \"mapbox://styles/mapbox/streets-v11\",\r\n      center: [lng, lat],\r\n      zoom: zoom,\r\n    });\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!map.current) return; // wait for map to initialize\r\n    map.current.on(\"move\", () => {\r\n      setLng(map.current.getCenter().lng.toFixed(4));\r\n      setLat(map.current.getCenter().lat.toFixed(4));\r\n      setZoom(map.current.getZoom().toFixed(2));\r\n    });\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"sidebar\">\r\n        Longitude: {lng} | Latitude: {lat} | Zoom: {zoom}\r\n      </div>\r\n      <div ref={mapContainer} className=\"mapsensor\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SensorsMap;\r\n"]},"metadata":{},"sourceType":"module"}