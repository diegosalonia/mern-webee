{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\diego\\\\Desktop\\\\mern-webee\\\\frontend\\\\src\\\\components\\\\sensor\\\\SensorCreatorForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Card, FloatingLabel, Form } from \"react-bootstrap\";\nimport { useHistory, useParams } from \"react-router\";\nimport { toast } from \"react-toastify\";\nimport { createSensor, getSensor, updateSensor } from \"./SensorService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SensorCreatorForm = () => {\n  _s();\n\n  const history = useHistory();\n  const params = useParams();\n  const initialState = {\n    _id: \"\",\n    name: \"\",\n    address: \"\",\n    location: \"\",\n    minval: \"\",\n    maxval: \"\"\n  };\n  const [sensor, setSensor] = useState(initialState);\n\n  const handleInputChange = e => {\n    setSensor({ ...sensor,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (!params.id) {\n      await createSensor(sensor);\n      toast.success(\"New Sensor Created\");\n      setSensor(initialState);\n    } else {\n      await updateSensor(params.id, sensor);\n      console.log('params.id', params.id);\n    }\n\n    history.push(\"/\");\n  };\n\n  const getOneSensor = async id => {\n    const resp = await getSensor(id);\n    const {\n      name,\n      formattedAddress,\n      minval,\n      maxval\n    } = resp.data;\n    console.log(resp);\n    setSensor({\n      name,\n      address: formattedAddress,\n      minval,\n      maxval\n    });\n  };\n\n  useEffect(() => {\n    if (params.id) {\n      getOneSensor(params.id);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      border: \"info\",\n      style: {\n        width: \"18rem\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        children: \"Create Sensor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"name\",\n              placeholder: \"name\",\n              className: \"form-control\",\n              onChange: handleInputChange,\n              value: sensor.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"address\",\n              placeholder: \"Address\",\n              className: \"form-control\",\n              onChange: handleInputChange,\n              value: sensor.address || sensor.formattedAddress\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"minval\",\n              placeholder: \"Min Val\",\n              className: \"form-control\",\n              onChange: handleInputChange,\n              value: sensor.minval\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"maxval\",\n              placeholder: \"Max Val\",\n              className: \"form-control\",\n              onChange: handleInputChange,\n              value: sensor.maxval\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this), params.id ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-danger\",\n            children: \"Update Sensor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            children: \"Create Sensor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SensorCreatorForm, \"fEsMbVm+JhAvMtBMSt/gHHSrRPU=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = SensorCreatorForm;\nexport default SensorCreatorForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SensorCreatorForm\");","map":{"version":3,"sources":["C:/Users/diego/Desktop/mern-webee/frontend/src/components/sensor/SensorCreatorForm.js"],"names":["React","useEffect","useState","Card","FloatingLabel","Form","useHistory","useParams","toast","createSensor","getSensor","updateSensor","SensorCreatorForm","history","params","initialState","_id","name","address","location","minval","maxval","sensor","setSensor","handleInputChange","e","target","value","handleSubmit","preventDefault","id","success","console","log","push","getOneSensor","resp","formattedAddress","data","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Card, FloatingLabel, Form } from \"react-bootstrap\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { toast } from \"react-toastify\";\r\nimport { createSensor, getSensor, updateSensor } from \"./SensorService\";\r\n\r\nconst SensorCreatorForm = () => {\r\n  const history = useHistory();\r\n  const params = useParams();\r\n\r\n  const initialState = {\r\n    _id: \"\",\r\n    name: \"\",\r\n    address:\"\",\r\n    location: \"\",\r\n    minval: \"\",\r\n    maxval: \"\",\r\n  };\r\n\r\n  const [sensor, setSensor] = useState(initialState);\r\n\r\n  const handleInputChange = (e) => {\r\n    setSensor({ ...sensor, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!params.id) {\r\n      await createSensor(sensor);\r\n      toast.success(\"New Sensor Created\");\r\n      setSensor(initialState);      \r\n    } else {\r\n      await updateSensor(params.id, sensor);\r\n      console.log('params.id', params.id)\r\n    }\r\n\r\n\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const getOneSensor = async (id) => {\r\n    const resp = await getSensor(id);\r\n    const { name, formattedAddress, minval, maxval } = resp.data;\r\n    console.log(resp);\r\n    setSensor({ name, address: formattedAddress, minval, maxval });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (params.id) {\r\n      getOneSensor(params.id);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <Card border=\"info\" style={{ width: \"18rem\" }}>\r\n        <Card.Header>Create Sensor</Card.Header>\r\n        <Card.Body>\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                placeholder=\"name\"\r\n                className=\"form-control\"\r\n                onChange={handleInputChange}\r\n                value={sensor.name}\r\n              />\r\n            </div>\r\n            <br />\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"address\"\r\n                placeholder=\"Address\"\r\n                className=\"form-control\"\r\n                onChange={handleInputChange}\r\n                value={sensor.address || sensor.formattedAddress}\r\n              />\r\n            </div>\r\n            <br />\r\n\r\n            {/* <div className=\"form-group\">\r\n              <FloatingLabel\r\n                controlId=\"floatingInput\"\r\n                label=\"Address\"\r\n                className=\"mb-3\"\r\n              >\r\n                <Form.Control \r\n                type=\"text\"\r\n                name=\"address\" \r\n                placeholder=\"address\" \r\n                value={sensor.address}\r\n                />\r\n              </FloatingLabel>\r\n            </div>\r\n            <br /> */}\r\n\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"number\"\r\n                name=\"minval\"\r\n                placeholder=\"Min Val\"\r\n                className=\"form-control\"\r\n                onChange={handleInputChange}\r\n                value={sensor.minval}\r\n              />\r\n            </div>\r\n            <br />\r\n\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"number\"\r\n                name=\"maxval\"\r\n                placeholder=\"Max Val\"\r\n                className=\"form-control\"\r\n                onChange={handleInputChange}\r\n                value={sensor.maxval}\r\n              />\r\n            </div>\r\n            <br />\r\n\r\n            {params.id ? (\r\n              <button className=\"btn btn-danger\">Update Sensor</button>\r\n            ) : (\r\n              <button className=\"btn btn-primary\">Create Sensor</button>\r\n            )}\r\n          </form>\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SensorCreatorForm;\r\n"]},"metadata":{},"sourceType":"module"}